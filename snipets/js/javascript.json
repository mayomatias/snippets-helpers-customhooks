{
	"Crear un slice de Redux": {
		"prefix": "redux-slice",
		"body": [
			"import { createSlice } from '@reduxjs/toolkit';",
			"",
			"export const ${1:template}Slice = createSlice({",
			"  name: '${1:name}',",
			"  initialState: {",
			"    counter: 10",
			"  },",
			"  reducers: {",
			"     increment: (state, /* action */ ) => {",
			"      state.counter += 1;",
			"    },",
			"  }",
			"});",
			"",
			"",
			"// Action creators are generated for each case reducer function",
			"export const { increment } = ${1:template}Slice.actions;"
		],
		"description": "Log output to console"
	},
	"Crear un store de Redux": {
		"prefix": "redux-store",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit';",
			"",
			"export const store = configureStore({",
			"  reducer: {",
			"    ${1:name}: ${1:name}Slice.reducer,",
			"  },",
			"});"
		],
		"description": "Log output to console"
	},
	"Crear un Functional Component": {
    "prefix": "rfc",
    "body": [
	  "interface Props {",
      "  a: number",
      "}",
	  "",
	  "",	
      "const ${1:ComponentName}:React.FC<Props> = ({a}) => {",
      "  return (",
      "    <div>",
      "      {a}",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:ComponentName};"
    ],
    "description": "Crear un Functional Component en React"
  	},
  	"React useState": {
		"prefix": "uses",
		"body": [
		"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initValue})"
		]
	},
	"React useEffect": {
		"prefix": "usee",
		"body": [
			"useEffect(() => {",
			"  ${1:effect}",	
			"  return () => {",
			"    ${2:cleanUp}",
			"  }",
			"}, [${3:dependency}])"
		]
	},
}
